jsPsych.plugins["intuitive-cues"] = (function () {

	// declare an empty object that will become our finalized plug-in
	let plugin = {};

	// we want to pre-load media; the arguments here are plug-in name, plug-in parameter, media-type
	jsPsych.pluginAPI.registerPreload('intuitive-cues', 'audio', 'audio');

	plugin.info = {
		name: 'intuitive-cues',
		parameters: {
			fixation: {
				type: jsPsych.plugins.parameterType.STRING,
				pretty_name: 'Fixation',
				default: null,
				description: 'Initial fixation stimulus'
			},
			audio: {
				type: jsPsych.plugins.parameterType.AUDIO,
				pretty_name: "Audio Files",
				default: null,
				description: 'Audio files, if any, to accompany grid.',
			},
			soa: {
				type: jsPsych.plugins.parameterType.INT,
				pretty_name: "Duration of soa",
				default: null,
				description: 'Duration of soa',
			},
			cue_validity: {
				type: jsPsych.plugins.parameterType.STRING,
				pretty_name: "Cue validity",
				default: null,
				description: 'Cue validity',
			},
			target: {
				type: jsPsych.plugins.parameterType.STRING,
				pretty_name: "Target Color",
				default: null,
				description: "Target color"
			}
		}
	};

	plugin.additional_styles = function (data) {
		// append any additional CSS from the cfg property to the head (they are be removed later)
		let additional_styles = "";
		for (selector in data) {
			additional_styles += `\t${selector} {\n`;
			for (property in data[selector]) {
				additional_styles += `\t\t${property}: ${data[selector][property]};\n`;
			}
			additional_styles += `\t}\n\n`;
		}

		$("head").attr("id", "additional_styles").append($("<style />").html(additional_styles));
	};

	plugin.keypress_handler = function (event) {
		let key = String.fromCharCode(event.which);
		if (key === 'z' || key == '/') {
			let data = copy(plugin.data_template);
			data.rt = performance.now() - plugin.start;
			data.soa =  plugin.soa;
			data.target = plugin.target_color;
			data.tone = plugin.tone;
			data.response = key;
			$("#target").remove();
			$("body").append($("<p />").attr('id', 'rt').addClass(plugin.target_color)).html(rt);
			setTimeout(plugin.end_trial(data), 1000)
		}
	};


	plugin.play_tone = function () {
		if (plugin.audio_context !== null && !plugin.tone_playing) {

			// plugin.audio_context.currentTime = 0;
			// var source = plugin.audio_context.createBufferSource();
			// source.buffer = jsPsych.pluginAPI.getAudioBuffer(plugin.audio[1]);
			// source.connect(plugin.audio_context.destination);
			plugin.source.start(0);
			plugin.tone_playing = true;
			plugin.source.onended = function () {
				plugin.tone_playing = false;
			}
		}
	};


	plugin.init_audio = function () {
		// configure jsPsych's audio context
		plugin.audio_context = jsPsych.pluginAPI.audioContext();
		if (plugin.audio_context) {
			plugin.source = plugin.audio_context.createBufferSource();
			plugin.source.buffer = jsPsych.pluginAPI.getAudioBuffer(plugin.audio[1]);
			plugin.source.connect(plugin.audio_context.destination);
		} else {
			var audio = jsPsych.pluginAPI.getAudioBuffer(plugin.audio[1]);
			audio.currentTime = 0;
		}

		plugin.mono_context = jsPsych.pluginAPI.audioContext();
		if (plugin.mono_context) {
			plugin.mono_source = plugin.mono_context.createBufferSource();
			plugin.mono_source.buffer = jsPsych.pluginAPI.getAudioBuffer(plugin.audio[0]);
			plugin.mono_source.connect(plugin.mono_context.destination);
			plugin.mono_source.loop = true;
		} else {
			var audio = jsPsych.pluginAPI.getAudioBuffer(plugin.audio[0]);
			audio.currentTime = 0;
		}

		plugin.mono_source.start(0);
		plugin.mono_context.suspend();


	};


	plugin.trial = function (display_element, trial) {
		plugin.audio = trial.audio;
		plugin.fixation = {
			duration: Math.floor(Math.random() * build.max_fix) + 1,
			type:  trial.fixation
		};
		plugin.target_color = trial.target_color;
		plugin.soa = trial.soa;
		plugin.valid = trial.cue_validity === 'valid';
		plugin.one_dva = trial.cfg.one_dva;
		plugin.data_repo = trial.cfg.data_repo;
		plugin.data_template = trial.cfg.data_template;



		$('#jspsych-loading-progress-bar-container').remove();

		// append any additional CSS from the cfg property to the head (they are be removed later)
		// plugin.additional_styles(trial.cfg.additional_styles);

		// // generate and attach HTML elements
		// plugin.generate_html_stimuli(display_element);

		// configure jsPsych's audio context
		plugin.init_audio();

		// add the fixation stimuli to the screen
		let fixation = [];
		for (let i = 0; i< (plugin.fixation.type === "long" ? 8 : 2); i++) fixation.push($("<div />").addClass('fix-dash'))
		$(display_element).append($("<div />").attr('id', 'fixation').append(fixation));

		// start the trial procedure

		let start = performance.now();
		plugin.mono_context.resume();
		while ( (performance.now() - start) < 500) {
			continue;
		}
		plugin.mono_source.loop = false;
		plugin.mono_context.suspend();

		// plugin.play_tone();
		while ( performance.now() - start < 1000) {
			continue;
		}
		pr("fuck yu");

		if (false) {

			setTimeout(function () {
				$("#fixation").remove();
				plugin.play_tone();
				$("body").trigger("toggle-mono");
				setTimeout(function () {
					setTimeout(function () {
						$("body").trigger("mono-start");
						$("body").keydown(plugin.keypress_handler);
						plugin.audio_context.close();
						plugin.start = performance.now();
						$(display_element).append($("<div />").attr('id', 'target').addClass(`circle ${plugin.target_color}`))
					}, plugin.soa)
				}, 100)
			}, plugin.fixation.duration);

		}



		plugin.end_trial = function (trial_data) {
			// it's justa a best-jsPsychic-practice to do this at the end of every trial
			jsPsych.pluginAPI.clearAllTimeouts();


			// clear the <body> tag
			display_element.innerHTML = ''; // or, if you like, $(display_element).html('');

			plugin.audio_context = null;
			data_repo.push(trial_data);

			// log that shit and  move on to the next trial
			jsPsych.finishTrial(trial_data);
		};

	};

	return plugin;

})();

